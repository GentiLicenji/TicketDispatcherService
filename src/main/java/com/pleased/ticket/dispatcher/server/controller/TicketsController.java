/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.pleased.ticket.dispatcher.server.controller;

import com.pleased.ticket.dispatcher.server.delegate.TicketsDelegate;
import com.pleased.ticket.dispatcher.server.exception.TicketNotFoundException;
import com.pleased.ticket.dispatcher.server.model.rest.*;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;
import reactor.core.publisher.Mono;

import javax.validation.Valid;
import javax.validation.ValidationException;
import java.util.UUID;

@javax.annotation.Generated(value = "com.glic.GentiSpringCodegen", date = "2025-06-29T19:50:29.045+02:00")

@Validated
@RestController
@RequestMapping("/api/v1")
@Api(value = "tickets", description = "Group of APIs providing ticket operations.", tags = {"Tickets"})
public class TicketsController {

    private final TicketsDelegate ticketsDelegate;

    @Autowired
    public TicketsController(TicketsDelegate ticketsDelegate) {
        this.ticketsDelegate = ticketsDelegate;
    }

    @ApiOperation(value = "Create a new ticket", nickname = "createTicket", notes = "", response = TicketResponse.class, authorizations = {
            @Authorization(value = "jwt"),
            @Authorization(value = "oauth2", scopes = {
                    @AuthorizationScope(scope = "read", description = "Read access"),
                    @AuthorizationScope(scope = "write", description = "Write access")
            })
    }, tags = {"Tickets"})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Ticket created", response = TicketResponse.class)
    })
    @PostMapping(value = "/tickets",
            produces = {"application/json"},
            consumes = {"application/json"})
    public Mono<ResponseEntity<TicketResponse>> createTicket(
            @ApiParam(value = "", required = true)
            @Valid @RequestBody TicketCreateRequest body,

            @ApiParam(value = "")
            @RequestHeader(value = "X-Correlation-ID", required = false) UUID xCorrelationID,

            @ApiParam(value = "")
            @RequestHeader(value = "Idempotency-Key", required = true) UUID idempotencyKey,

            @ApiParam(value = "")
            @RequestHeader(value = "User-Agent", required = false) String userAgent) {

        return ticketsDelegate.createTicket(body, xCorrelationID, idempotencyKey, userAgent)
                .map(response -> ResponseEntity.ok(response));
    }

    @ApiOperation(value = "Assign a ticket to a user", nickname = "assignTicket", notes = "", response = TicketAssignmentResponse.class, authorizations = {
            @Authorization(value = "jwt"),
            @Authorization(value = "oauth2", scopes = {
                    @AuthorizationScope(scope = "read", description = "Read access"),
                    @AuthorizationScope(scope = "write", description = "Write access")
            })
    }, tags = {"Tickets"})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Ticket assigned", response = TicketAssignmentResponse.class)
    })
    @PostMapping(value = "/tickets/{ticketID}/assign",
            produces = {"application/json"},
            consumes = {"application/json"})
    public Mono<ResponseEntity<TicketAssignmentResponse>> assignTicket(

            @ApiParam(value = "", required = true)
            @PathVariable("ticketID") String ticketID,

            @ApiParam(value = "", required = true)
            @Valid @RequestBody TicketAssignmentRequest body,

            @ApiParam(value = "")
            @RequestHeader(value = "X-Correlation-ID", required = false) String xCorrelationID,

            @ApiParam(value = "")
            @RequestHeader(value = "Idempotency-Key", required = true) String idempotencyKey,

            @ApiParam(value = "")
            @RequestHeader(value = "User-Agent", required = false) String userAgent) {

        return ticketsDelegate.assignTicket(body, ticketID, xCorrelationID, idempotencyKey, userAgent)
                .map(response -> ResponseEntity.ok(response));
    }

    @ApiOperation(value = "Update the status of a ticket", nickname = "updateTicketStatus", notes = "", response = TicketStatusResponse.class, authorizations = {
            @Authorization(value = "jwt"),
            @Authorization(value = "oauth2", scopes = {
                    @AuthorizationScope(scope = "read", description = "Read access"),
                    @AuthorizationScope(scope = "write", description = "Write access")
            })
    }, tags = {"Tickets"})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Status updated", response = TicketStatusResponse.class)
    })
    @PatchMapping(value = "/tickets/{ticketID}/status",
            produces = {"application/json"},
            consumes = {"application/json"})
    public Mono<ResponseEntity<TicketStatusResponse>> updateTicketStatus(

            @ApiParam(value = "", required = true)
            @PathVariable("ticketID") String ticketID,

            @ApiParam(value = "", required = true)
            @Valid @RequestBody TicketStatusRequest body,

            @ApiParam(value = "")
            @RequestHeader(value = "X-Correlation-ID", required = false) String xCorrelationID,

            @ApiParam(value = "")
            @RequestHeader(value = "Idempotency-Key", required = true) String idempotencyKey,

            @ApiParam(value = "")
            @RequestHeader(value = "User-Agent", required = false) String userAgent) {

        return ticketsDelegate.updateTicketStatus(body,  ticketID, xCorrelationID, idempotencyKey, userAgent)
                .map(response -> ResponseEntity.ok(response));
    }

    @ApiOperation(value = "Update ticket details", nickname = "updateTicketDetails", notes = "", response = TicketResponse.class, authorizations = {
            @Authorization(value = "jwt"),
            @Authorization(value = "oauth2", scopes = {
                    @AuthorizationScope(scope = "read", description = "Read access"),
                    @AuthorizationScope(scope = "write", description = "Write access")
            })
    }, tags = {"Tickets"})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Ticket updated", response = TicketResponse.class)
    })
    @PatchMapping(value = "/tickets/{ticketID}/details",
            produces = {"application/json"},
            consumes = {"application/json"})
    public Mono<ResponseEntity<TicketResponse>> updateTicketDetails(

            @ApiParam(value = "", required = true)
            @PathVariable("ticketID") String ticketID,

            @ApiParam(value = "", required = true)
            @Valid @RequestBody TicketDetailsRequest body,

            @ApiParam(value = "")
            @RequestHeader(value = "X-Correlation-ID", required = false) String xCorrelationID,

            @ApiParam(value = "")
            @RequestHeader(value = "Idempotency-Key", required = true) String idempotencyKey,

            @ApiParam(value = "")
            @RequestHeader(value = "User-Agent", required = false) String userAgent) {

        return ticketsDelegate.updateTicketDetails(body, ticketID, xCorrelationID, idempotencyKey, userAgent)
                .map(response -> ResponseEntity.ok(response));
    }
}