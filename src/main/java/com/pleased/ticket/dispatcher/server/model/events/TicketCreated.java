/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.pleased.ticket.dispatcher.server.model.events;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class TicketCreated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7835740324351625315L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TicketCreated\",\"namespace\":\"com.pleased.ticket.dispatcher.server.model.events\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"uuid\"}},{\"name\":\"eventType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"ticketId\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"uuid\"}},{\"name\":\"subject\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"userId\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"uuid\"}},{\"name\":\"projectId\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"uuid\"}},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<TicketCreated> ENCODER =
      new BinaryMessageEncoder<TicketCreated>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TicketCreated> DECODER =
      new BinaryMessageDecoder<TicketCreated>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TicketCreated> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TicketCreated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TicketCreated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TicketCreated>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TicketCreated to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TicketCreated from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TicketCreated instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TicketCreated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.nio.ByteBuffer eventId;
   private java.lang.String eventType;
   private java.time.Instant timestamp;
   private java.nio.ByteBuffer ticketId;
   private java.lang.String subject;
   private java.lang.String description;
   private java.nio.ByteBuffer userId;
   private java.nio.ByteBuffer projectId;
   private java.time.Instant createdAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TicketCreated() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param eventType The new value for eventType
   * @param timestamp The new value for timestamp
   * @param ticketId The new value for ticketId
   * @param subject The new value for subject
   * @param description The new value for description
   * @param userId The new value for userId
   * @param projectId The new value for projectId
   * @param createdAt The new value for createdAt
   */
  public TicketCreated(java.nio.ByteBuffer eventId, java.lang.String eventType, java.time.Instant timestamp, java.nio.ByteBuffer ticketId, java.lang.String subject, java.lang.String description, java.nio.ByteBuffer userId, java.nio.ByteBuffer projectId, java.time.Instant createdAt) {
    this.eventId = eventId;
    this.eventType = eventType;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.ticketId = ticketId;
    this.subject = subject;
    this.description = description;
    this.userId = userId;
    this.projectId = projectId;
    this.createdAt = createdAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return eventType;
    case 2: return timestamp;
    case 3: return ticketId;
    case 4: return subject;
    case 5: return description;
    case 6: return userId;
    case 7: return projectId;
    case 8: return createdAt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.nio.ByteBuffer)value$; break;
    case 1: eventType = value$ != null ? value$.toString() : null; break;
    case 2: timestamp = (java.time.Instant)value$; break;
    case 3: ticketId = (java.nio.ByteBuffer)value$; break;
    case 4: subject = value$ != null ? value$.toString() : null; break;
    case 5: description = value$ != null ? value$.toString() : null; break;
    case 6: userId = (java.nio.ByteBuffer)value$; break;
    case 7: projectId = (java.nio.ByteBuffer)value$; break;
    case 8: createdAt = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.nio.ByteBuffer getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.nio.ByteBuffer value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.String getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.String value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'ticketId' field.
   * @return The value of the 'ticketId' field.
   */
  public java.nio.ByteBuffer getTicketId() {
    return ticketId;
  }


  /**
   * Sets the value of the 'ticketId' field.
   * @param value the value to set.
   */
  public void setTicketId(java.nio.ByteBuffer value) {
    this.ticketId = value;
  }

  /**
   * Gets the value of the 'subject' field.
   * @return The value of the 'subject' field.
   */
  public java.lang.String getSubject() {
    return subject;
  }


  /**
   * Sets the value of the 'subject' field.
   * @param value the value to set.
   */
  public void setSubject(java.lang.String value) {
    this.subject = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.nio.ByteBuffer getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.nio.ByteBuffer value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'projectId' field.
   * @return The value of the 'projectId' field.
   */
  public java.nio.ByteBuffer getProjectId() {
    return projectId;
  }


  /**
   * Sets the value of the 'projectId' field.
   * @param value the value to set.
   */
  public void setProjectId(java.nio.ByteBuffer value) {
    this.projectId = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.time.Instant getCreatedAt() {
    return createdAt;
  }


  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.time.Instant value) {
    this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new TicketCreated RecordBuilder.
   * @return A new TicketCreated RecordBuilder
   */
  public static com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder newBuilder() {
    return new com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder();
  }

  /**
   * Creates a new TicketCreated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TicketCreated RecordBuilder
   */
  public static com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder newBuilder(com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder other) {
    if (other == null) {
      return new com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder();
    } else {
      return new com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder(other);
    }
  }

  /**
   * Creates a new TicketCreated RecordBuilder by copying an existing TicketCreated instance.
   * @param other The existing instance to copy.
   * @return A new TicketCreated RecordBuilder
   */
  public static com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder newBuilder(com.pleased.ticket.dispatcher.server.model.events.TicketCreated other) {
    if (other == null) {
      return new com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder();
    } else {
      return new com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder(other);
    }
  }

  /**
   * RecordBuilder for TicketCreated instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TicketCreated>
    implements org.apache.avro.data.RecordBuilder<TicketCreated> {

    private java.nio.ByteBuffer eventId;
    private java.lang.String eventType;
    private java.time.Instant timestamp;
    private java.nio.ByteBuffer ticketId;
    private java.lang.String subject;
    private java.lang.String description;
    private java.nio.ByteBuffer userId;
    private java.nio.ByteBuffer projectId;
    private java.time.Instant createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ticketId)) {
        this.ticketId = data().deepCopy(fields()[3].schema(), other.ticketId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.subject)) {
        this.subject = data().deepCopy(fields()[4].schema(), other.subject);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.userId)) {
        this.userId = data().deepCopy(fields()[6].schema(), other.userId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.projectId)) {
        this.projectId = data().deepCopy(fields()[7].schema(), other.projectId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing TicketCreated instance
     * @param other The existing instance to copy.
     */
    private Builder(com.pleased.ticket.dispatcher.server.model.events.TicketCreated other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ticketId)) {
        this.ticketId = data().deepCopy(fields()[3].schema(), other.ticketId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subject)) {
        this.subject = data().deepCopy(fields()[4].schema(), other.subject);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.userId)) {
        this.userId = data().deepCopy(fields()[6].schema(), other.userId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.projectId)) {
        this.projectId = data().deepCopy(fields()[7].schema(), other.projectId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[8].schema(), other.createdAt);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder setEventId(java.nio.ByteBuffer value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.String getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder setEventType(java.lang.String value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[2], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ticketId' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getTicketId() {
      return ticketId;
    }


    /**
      * Sets the value of the 'ticketId' field.
      * @param value The value of 'ticketId'.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder setTicketId(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.ticketId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ticketId' field has been set.
      * @return True if the 'ticketId' field has been set, false otherwise.
      */
    public boolean hasTicketId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ticketId' field.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder clearTicketId() {
      ticketId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'subject' field.
      * @return The value.
      */
    public java.lang.String getSubject() {
      return subject;
    }


    /**
      * Sets the value of the 'subject' field.
      * @param value The value of 'subject'.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder setSubject(java.lang.String value) {
      validate(fields()[4], value);
      this.subject = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'subject' field has been set.
      * @return True if the 'subject' field has been set, false otherwise.
      */
    public boolean hasSubject() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'subject' field.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder clearSubject() {
      subject = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder setDescription(java.lang.String value) {
      validate(fields()[5], value);
      this.description = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder clearDescription() {
      description = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder setUserId(java.nio.ByteBuffer value) {
      validate(fields()[6], value);
      this.userId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'projectId' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getProjectId() {
      return projectId;
    }


    /**
      * Sets the value of the 'projectId' field.
      * @param value The value of 'projectId'.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder setProjectId(java.nio.ByteBuffer value) {
      validate(fields()[7], value);
      this.projectId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'projectId' field has been set.
      * @return True if the 'projectId' field has been set, false otherwise.
      */
    public boolean hasProjectId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'projectId' field.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder clearProjectId() {
      projectId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.time.Instant getCreatedAt() {
      return createdAt;
    }


    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder setCreatedAt(java.time.Instant value) {
      validate(fields()[8], value);
      this.createdAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public com.pleased.ticket.dispatcher.server.model.events.TicketCreated.Builder clearCreatedAt() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TicketCreated build() {
      try {
        TicketCreated record = new TicketCreated();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.nio.ByteBuffer) defaultValue(fields()[0]);
        record.eventType = fieldSetFlags()[1] ? this.eventType : (java.lang.String) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.time.Instant) defaultValue(fields()[2]);
        record.ticketId = fieldSetFlags()[3] ? this.ticketId : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.subject = fieldSetFlags()[4] ? this.subject : (java.lang.String) defaultValue(fields()[4]);
        record.description = fieldSetFlags()[5] ? this.description : (java.lang.String) defaultValue(fields()[5]);
        record.userId = fieldSetFlags()[6] ? this.userId : (java.nio.ByteBuffer) defaultValue(fields()[6]);
        record.projectId = fieldSetFlags()[7] ? this.projectId : (java.nio.ByteBuffer) defaultValue(fields()[7]);
        record.createdAt = fieldSetFlags()[8] ? this.createdAt : (java.time.Instant) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TicketCreated>
    WRITER$ = (org.apache.avro.io.DatumWriter<TicketCreated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TicketCreated>
    READER$ = (org.apache.avro.io.DatumReader<TicketCreated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










