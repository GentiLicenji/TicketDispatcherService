/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.pleased.ticket.dispatcher.server.model.events;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class TicketAssigned extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -1123661715585932742L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TicketAssigned\",\"namespace\":\"com.pleased.ticket.dispatcher.server.model.events\",\"fields\":[{\"name\":\"eventId\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"uuid\"}},{\"name\":\"ticketId\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"uuid\"}},{\"name\":\"assigneeId\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"uuid\"}},{\"name\":\"assignedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    static {
        MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    }

    private static final BinaryMessageEncoder<TicketAssigned> ENCODER =
            new BinaryMessageEncoder<TicketAssigned>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<TicketAssigned> DECODER =
            new BinaryMessageDecoder<TicketAssigned>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<TicketAssigned> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<TicketAssigned> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<TicketAssigned> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<TicketAssigned>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this TicketAssigned to a ByteBuffer.
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a TicketAssigned from a ByteBuffer.
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a TicketAssigned instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static TicketAssigned fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private java.nio.ByteBuffer eventId;
    private java.nio.ByteBuffer ticketId;
    private java.nio.ByteBuffer assigneeId;
    private java.time.Instant assignedAt;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public TicketAssigned() {
    }

    /**
     * All-args constructor.
     * @param eventId The new value for eventId
     * @param ticketId The new value for ticketId
     * @param assigneeId The new value for assigneeId
     * @param assignedAt The new value for assignedAt
     */
    public TicketAssigned(java.nio.ByteBuffer eventId, java.nio.ByteBuffer ticketId, java.nio.ByteBuffer assigneeId, java.time.Instant assignedAt) {
        this.eventId = eventId;
        this.ticketId = ticketId;
        this.assigneeId = assigneeId;
        this.assignedAt = assignedAt.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return eventId;
            case 1:
                return ticketId;
            case 2:
                return assigneeId;
            case 3:
                return assignedAt;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    private static final org.apache.avro.Conversion<?>[] conversions =
            new org.apache.avro.Conversion<?>[]{
                    null,
                    null,
                    null,
                    new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
                    null
            };

    @Override
    public org.apache.avro.Conversion<?> getConversion(int field) {
        return conversions[field];
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                eventId = (java.nio.ByteBuffer) value$;
                break;
            case 1:
                ticketId = (java.nio.ByteBuffer) value$;
                break;
            case 2:
                assigneeId = (java.nio.ByteBuffer) value$;
                break;
            case 3:
                assignedAt = (java.time.Instant) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'eventId' field.
     * @return The value of the 'eventId' field.
     */
    public java.nio.ByteBuffer getEventId() {
        return eventId;
    }


    /**
     * Sets the value of the 'eventId' field.
     * @param value the value to set.
     */
    public void setEventId(java.nio.ByteBuffer value) {
        this.eventId = value;
    }

    /**
     * Gets the value of the 'ticketId' field.
     * @return The value of the 'ticketId' field.
     */
    public java.nio.ByteBuffer getTicketId() {
        return ticketId;
    }


    /**
     * Sets the value of the 'ticketId' field.
     * @param value the value to set.
     */
    public void setTicketId(java.nio.ByteBuffer value) {
        this.ticketId = value;
    }

    /**
     * Gets the value of the 'assigneeId' field.
     * @return The value of the 'assigneeId' field.
     */
    public java.nio.ByteBuffer getAssigneeId() {
        return assigneeId;
    }


    /**
     * Sets the value of the 'assigneeId' field.
     * @param value the value to set.
     */
    public void setAssigneeId(java.nio.ByteBuffer value) {
        this.assigneeId = value;
    }

    /**
     * Gets the value of the 'assignedAt' field.
     * @return The value of the 'assignedAt' field.
     */
    public java.time.Instant getAssignedAt() {
        return assignedAt;
    }


    /**
     * Sets the value of the 'assignedAt' field.
     * @param value the value to set.
     */
    public void setAssignedAt(java.time.Instant value) {
        this.assignedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    }

    /**
     * Creates a new TicketAssigned RecordBuilder.
     * @return A new TicketAssigned RecordBuilder
     */
    public static com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder newBuilder() {
        return new com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder();
    }

    /**
     * Creates a new TicketAssigned RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new TicketAssigned RecordBuilder
     */
    public static com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder newBuilder(com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder other) {
        if (other == null) {
            return new com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder();
        } else {
            return new com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder(other);
        }
    }

    /**
     * Creates a new TicketAssigned RecordBuilder by copying an existing TicketAssigned instance.
     * @param other The existing instance to copy.
     * @return A new TicketAssigned RecordBuilder
     */
    public static com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder newBuilder(com.pleased.ticket.dispatcher.server.model.events.TicketAssigned other) {
        if (other == null) {
            return new com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder();
        } else {
            return new com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder(other);
        }
    }

    /**
     * RecordBuilder for TicketAssigned instances.
     */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TicketAssigned>
            implements org.apache.avro.data.RecordBuilder<TicketAssigned> {

        private java.nio.ByteBuffer eventId;
        private java.nio.ByteBuffer ticketId;
        private java.nio.ByteBuffer assigneeId;
        private java.time.Instant assignedAt;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.eventId)) {
                this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.ticketId)) {
                this.ticketId = data().deepCopy(fields()[1].schema(), other.ticketId);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.assigneeId)) {
                this.assigneeId = data().deepCopy(fields()[2].schema(), other.assigneeId);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.assignedAt)) {
                this.assignedAt = data().deepCopy(fields()[3].schema(), other.assignedAt);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
        }

        /**
         * Creates a Builder by copying an existing TicketAssigned instance
         * @param other The existing instance to copy.
         */
        private Builder(com.pleased.ticket.dispatcher.server.model.events.TicketAssigned other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.eventId)) {
                this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.ticketId)) {
                this.ticketId = data().deepCopy(fields()[1].schema(), other.ticketId);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.assigneeId)) {
                this.assigneeId = data().deepCopy(fields()[2].schema(), other.assigneeId);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.assignedAt)) {
                this.assignedAt = data().deepCopy(fields()[3].schema(), other.assignedAt);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Gets the value of the 'eventId' field.
         * @return The value.
         */
        public java.nio.ByteBuffer getEventId() {
            return eventId;
        }


        /**
         * Sets the value of the 'eventId' field.
         * @param value The value of 'eventId'.
         * @return This builder.
         */
        public com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder setEventId(java.nio.ByteBuffer value) {
            validate(fields()[0], value);
            this.eventId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'eventId' field has been set.
         * @return True if the 'eventId' field has been set, false otherwise.
         */
        public boolean hasEventId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'eventId' field.
         * @return This builder.
         */
        public com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder clearEventId() {
            eventId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'ticketId' field.
         * @return The value.
         */
        public java.nio.ByteBuffer getTicketId() {
            return ticketId;
        }


        /**
         * Sets the value of the 'ticketId' field.
         * @param value The value of 'ticketId'.
         * @return This builder.
         */
        public com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder setTicketId(java.nio.ByteBuffer value) {
            validate(fields()[1], value);
            this.ticketId = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'ticketId' field has been set.
         * @return True if the 'ticketId' field has been set, false otherwise.
         */
        public boolean hasTicketId() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'ticketId' field.
         * @return This builder.
         */
        public com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder clearTicketId() {
            ticketId = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'assigneeId' field.
         * @return The value.
         */
        public java.nio.ByteBuffer getAssigneeId() {
            return assigneeId;
        }


        /**
         * Sets the value of the 'assigneeId' field.
         * @param value The value of 'assigneeId'.
         * @return This builder.
         */
        public com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder setAssigneeId(java.nio.ByteBuffer value) {
            validate(fields()[2], value);
            this.assigneeId = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'assigneeId' field has been set.
         * @return True if the 'assigneeId' field has been set, false otherwise.
         */
        public boolean hasAssigneeId() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'assigneeId' field.
         * @return This builder.
         */
        public com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder clearAssigneeId() {
            assigneeId = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'assignedAt' field.
         * @return The value.
         */
        public java.time.Instant getAssignedAt() {
            return assignedAt;
        }


        /**
         * Sets the value of the 'assignedAt' field.
         * @param value The value of 'assignedAt'.
         * @return This builder.
         */
        public com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder setAssignedAt(java.time.Instant value) {
            validate(fields()[3], value);
            this.assignedAt = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'assignedAt' field has been set.
         * @return True if the 'assignedAt' field has been set, false otherwise.
         */
        public boolean hasAssignedAt() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'assignedAt' field.
         * @return This builder.
         */
        public com.pleased.ticket.dispatcher.server.model.events.TicketAssigned.Builder clearAssignedAt() {
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public TicketAssigned build() {
            try {
                TicketAssigned record = new TicketAssigned();
                record.eventId = fieldSetFlags()[0] ? this.eventId : (java.nio.ByteBuffer) defaultValue(fields()[0]);
                record.ticketId = fieldSetFlags()[1] ? this.ticketId : (java.nio.ByteBuffer) defaultValue(fields()[1]);
                record.assigneeId = fieldSetFlags()[2] ? this.assigneeId : (java.nio.ByteBuffer) defaultValue(fields()[2]);
                record.assignedAt = fieldSetFlags()[3] ? this.assignedAt : (java.time.Instant) defaultValue(fields()[3]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<TicketAssigned>
            WRITER$ = (org.apache.avro.io.DatumWriter<TicketAssigned>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<TicketAssigned>
            READER$ = (org.apache.avro.io.DatumReader<TicketAssigned>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}










