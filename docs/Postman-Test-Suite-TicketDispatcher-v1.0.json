{
  "info": {
    "name": "Pleased Ticketing System API",
    "description": "APIs for managing tickets in Pleased.com's internal ticketing system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "pleased-ticketing-api-v1"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://localhost:8080/api/v1",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjM0NSIsInN1YiI6InRlc3RAZXhhbXBsZS5jb20iLCJpYXQiOjE3NTEzMTgwMDAsImV4cCI6MTc1MTQwNDQwMH0.iqCV47_oJHtZq4xHh8bsmMaS-7rfG4wwh4PtwuvSMA0",
      "type": "string"
    },
    {
      "key": "correlation_id",
      "value": "{{$guid}}",
      "type": "string"
    },
    {
      "key": "created_ticket_id",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Generate correlation ID for each request",
          "pm.collectionVariables.set('correlation_id', pm.variables.replaceIn('{{$guid}}'));"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Tickets",
      "item": [
        {
          "name": "Create Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('ticketId');",
                  "    pm.expect(responseJson).to.have.property('subject');",
                  "    pm.expect(responseJson).to.have.property('description');",
                  "    pm.expect(responseJson).to.have.property('projectId');",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('createdAt');",
                  "});",
                  "",
                  "pm.test('Status is valid enum value', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const validStatuses = ['open', 'in_progress', 'closed'];",
                  "    pm.expect(validStatuses).to.include(responseJson.status);",
                  "});",
                  "",
                  "pm.test('Created date is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(new Date(responseJson.createdAt)).to.be.a('date');",
                  "});",
                  "",
                  "// Store ticket ID for subsequent requests",
                  "if (pm.response.code === 200) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('created_ticket_id', responseJson.ticketId);",
                  "}",
                  "",
                  "pm.test('Response headers are correct', function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
                  "    pm.expect(pm.response.headers.get('X-Correlation-ID')).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlation_id}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$guid}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman/API-Tests"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"subject\": \"Test ticket creation\",\n  \"description\": \"This is a test ticket created via Postman\",\n  \"projectId\": \"project-123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tickets",
              "host": ["{{baseUrl}}"],
              "path": ["tickets"]
            }
          }
        },
        {
          "name": "Assign Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has assignment details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('ticketId');",
                  "    pm.expect(responseJson).to.have.property('assignee');",
                  "    pm.expect(responseJson).to.have.property('assignedAt');",
                  "});",
                  "",
                  "pm.test('Assignee has required properties', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.assignee).to.have.property('userId');",
                  "    pm.expect(responseJson.assignee).to.have.property('name');",
                  "    pm.expect(responseJson.assignee).to.have.property('role');",
                  "});",
                  "",
                  "pm.test('Assigned date is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(new Date(responseJson.assignedAt)).to.be.a('date');",
                  "});",
                  "",
                  "pm.test('Ticket ID matches the one in URL', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const ticketIdFromUrl = pm.collectionVariables.get('created_ticket_id');",
                  "    pm.expect(responseJson.ticketId).to.equal(ticketIdFromUrl);",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Check if we have a ticket ID from previous request",
                  "const ticketId = pm.collectionVariables.get('created_ticket_id');",
                  "if (!ticketId) {",
                  "    console.warn('No ticket ID found. Please run \"Create Ticket\" first.');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlation_id}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$guid}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman/API-Tests"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ticketId\": \"{{created_ticket_id}}\",\n  \"assigneeId\": \"user-456\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tickets/{{created_ticket_id}}/assign",
              "host": ["{{baseUrl}}"],
              "path": ["tickets", "{{created_ticket_id}}", "assign"]
            }
          }
        },
        {
          "name": "Update Ticket Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has status update details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('ticketId');",
                  "    pm.expect(responseJson).to.have.property('status');",
                  "    pm.expect(responseJson).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Status was updated correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.equal('in_progress');",
                  "});",
                  "",
                  "pm.test('Updated date is valid and recent', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const updatedAt = new Date(responseJson.updatedAt);",
                  "    const now = new Date();",
                  "    const timeDiff = now - updatedAt;",
                  "    pm.expect(updatedAt).to.be.a('date');",
                  "    pm.expect(timeDiff).to.be.below(60000); // Within last minute",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Check if we have a ticket ID from previous request",
                  "const ticketId = pm.collectionVariables.get('created_ticket_id');",
                  "if (!ticketId) {",
                  "    console.warn('No ticket ID found. Please run \"Create Ticket\" first.');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlation_id}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$guid}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman/API-Tests"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"in_progress\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tickets/{{created_ticket_id}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["tickets", "{{created_ticket_id}}", "status"]
            }
          }
        },
        {
          "name": "Update Ticket Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has updated ticket details', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('ticketId');",
                  "    pm.expect(responseJson).to.have.property('subject');",
                  "    pm.expect(responseJson).to.have.property('description');",
                  "    pm.expect(responseJson).to.have.property('priority');",
                  "    pm.expect(responseJson).to.have.property('updatedAt');",
                  "});",
                  "",
                  "pm.test('Priority was updated correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.priority).to.equal('high');",
                  "});",
                  "",
                  "pm.test('Subject was updated correctly', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.subject).to.equal('Updated: Test ticket creation');",
                  "});",
                  "",
                  "pm.test('Priority is valid enum value', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const validPriorities = ['low', 'medium', 'high', 'urgent'];",
                  "    pm.expect(validPriorities).to.include(responseJson.priority);",
                  "});",
                  "",
                  "pm.test('Due date is valid format', function () {",
                  "    const responseJson = pm.response.json();",
                  "    if (responseJson.dueDate) {",
                  "        pm.expect(new Date(responseJson.dueDate)).to.be.a('date');",
                  "    }",
                  "});"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Check if we have a ticket ID from previous request",
                  "const ticketId = pm.collectionVariables.get('created_ticket_id');",
                  "if (!ticketId) {",
                  "    console.warn('No ticket ID found. Please run \"Create Ticket\" first.');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlation_id}}"
              },
              {
                "key": "Idempotency-Key",
                "value": "{{$guid}}"
              },
              {
                "key": "User-Agent",
                "value": "Postman/API-Tests"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"subject\": \"Updated: Test ticket creation\",\n  \"description\": \"This ticket has been updated with new details\",\n  \"priority\": \"high\",\n  \"notify\": true,\n  \"dueDate\": \"2025-07-15\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tickets/{{created_ticket_id}}/details",
              "host": ["{{baseUrl}}"],
              "path": ["tickets", "{{created_ticket_id}}", "details"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Create Ticket - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 (Bad Request)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response contains validation message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlation_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"subject\": \"Test ticket\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tickets",
              "host": ["{{baseUrl}}"],
              "path": ["tickets"]
            }
          }
        },
        {
          "name": "Update Status - Invalid Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 (Bad Request)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response indicates invalid status', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlation_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"invalid_status\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tickets/{{created_ticket_id}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["tickets", "{{created_ticket_id}}", "status"]
            }
          }
        },
        {
          "name": "Assign Ticket - Non-existent Ticket",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404 (Not Found)', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response indicates ticket not found', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Correlation-ID",
                "value": "{{correlation_id}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"ticketId\": \"non-existent-ticket-id\",\n  \"assigneeId\": \"user-123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tickets/non-existent-ticket-id/assign",
              "host": ["{{baseUrl}}"],
              "path": ["tickets", "non-existent-ticket-id", "assign"]
            }
          }
        }
      ]
    }
  ]
}